{"version":3,"file":"legacy-editor-to-editor.cjs.production.min.js","sources":["../src/splishToEdtr/types.ts","../src/legacyToSplish/markdownToHtml.ts","../src/legacyToSplish/markdownToSlate.ts","../src/legacyToSplish/createPlugin.ts","../src/legacyToSplish/normalizeMarkdown.ts","../src/legacyToSplish/split.ts","../src/legacyToSplish/transform.ts","../src/splishToEdtr/normalize-slate.ts","../src/splishToEdtr/convertSlate.tsx","../src/splishToEdtr/convertPlugins.ts","../src/splishToEdtr/index.ts","../src/index.ts"],"sourcesContent":["/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nexport enum Plugin {\n  AlphabetSort = '@serlo-org/alphabet-sort',\n  Anchor = '@serlo-org/anchor',\n  Blockquote = '@serlo-org/blockquote',\n  Equations = '@serlo-org/equations',\n  Geogebra = '@serlo-org/geogebra',\n  H5p = '@serlo-org/h5p',\n  Highlight = '@serlo-org/highlight',\n  Hint = '@serlo-org/hint',\n  Image = '@splish-me/image',\n  Injection = '@serlo-org/injection',\n  InputExercise = '@serlo-org/input-exercise',\n  License = '@serlo-org/license',\n  MatchingExercise = '@serlo-org/matching-exercise',\n  ScMcExercise = '@serlo-org/sc-mc-exercise',\n  Solution = '@serlo-org/solution',\n  Spoiler = '@serlo-org/spoiler',\n  StepByStep = '@serlo-org/step-by-step',\n  Table = '@serlo-org/table',\n  Text = '@splish-me/slate',\n}\nexport type Legacy = LegacyRow[] | string\n\nexport type LegacyRow = {\n  col: number\n  content: string\n}[]\n\nexport type Splish = {\n  id?: string\n  cells: Cell[]\n}\nexport type Row = Splish\n\nexport type Cell = RowCell | ContentCell\n\ntype RowCell = {\n  id?: string\n  size?: number\n  rows: Row[]\n}\n\nexport type ContentCell<S = unknown> = {\n  id?: string\n  size?: number\n  inline?: null\n  content: {\n    plugin: SplishPlugin\n    state: S\n  }\n}\n\nexport function isContentCell(cell: Cell): cell is ContentCell {\n  const c = cell as ContentCell\n  return typeof c.content !== 'undefined'\n}\n\ntype SplishPlugin = { name: Plugin | 'code'; version?: string }\n\nexport type Edtr = RowsPlugin | LayoutPlugin | OtherPlugin\n\nexport type RowsPlugin = { plugin: 'rows'; state: Edtr[] }\nexport type LayoutPlugin = {\n  plugin: 'layout'\n  state: { child: Edtr; width: number }[]\n}\n\nexport type OtherPlugin = {\n  plugin:\n    | 'anchor'\n    | 'article'\n    | 'blockquote'\n    | 'error'\n    | 'exercise'\n    | 'geogebra'\n    | 'highlight'\n    | 'image'\n    | 'important'\n    | 'injection'\n    | 'inputExercise'\n    | 'spoiler'\n    | 'scMcExercise'\n    | 'solution'\n    | 'table'\n    | 'text'\n    | 'video'\n  state: unknown\n}\n\nexport function isSplish(content: Legacy | Splish): content is Splish {\n  return (content as Splish).cells !== undefined\n}\n\nexport function isEdtr(content: Legacy | Splish | Edtr): content is Edtr {\n  return (content as Edtr).plugin !== undefined\n}\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { converter } from '@serlo/markdown'\n\nconst renderMarkdown = (input: string) => {\n  let html = converter.makeHtml(input)\n  html = html.replace(/\"/gm, '\"')\n  return html\n    .replace(\n      /<span class=\"mathInline\">%%(.*?)%%<\\/span>/gm,\n      '<katexinline>$1</katexinline>'\n    )\n    .replace(\n      /<span class=\"math\">\\$\\$(.*?)\\$\\$<\\/span>/gm,\n      '<katexblock>$1</katexblock>'\n    )\n    .replace(/\\r?\\n/gm, '')\n}\nexport default renderMarkdown\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { ContentCell, Plugin } from '../splishToEdtr/types'\nimport { SplishTextState } from './createPlugin'\nimport renderMarkdown from './markdownToHtml'\n\nconst markdownToSlate = (markdown: string): ContentCell<SplishTextState> => ({\n  content: {\n    plugin: { name: Plugin.Text, version: '0.0.0' },\n    state: {\n      importFromHtml: renderMarkdown(markdown),\n    },\n  },\n})\nexport default markdownToSlate\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { v4 } from 'uuid'\n\nimport markdownToSlate from './markdownToSlate'\nimport { Element, LinkedImagesTMP, NormalizedObject } from './normalizeMarkdown'\nimport { ValueJSON } from 'slate'\nimport { ContentCell, Splish, Plugin } from '../splishToEdtr/types'\n\nconst createPlugins = ({ normalized, elements }: NormalizedObject) => {\n  const split = normalized\n    .split(/(ยง\\d+ยง)/)\n    .map((s) => s.trim())\n    .filter((s) => s !== '')\n\n  if (!split.length) {\n    return [\n      {\n        cells: [markdownToSlate('')],\n      },\n    ]\n  }\n  return split.map((markdown) => {\n    const elementIDMatch = /ยง(\\d+)ยง/.exec(markdown)\n    if (elementIDMatch !== null) {\n      // explicitly cast the matched number for typescript\n      const i = parseInt(elementIDMatch[1])\n      return {\n        cells: [createPluginCell(elements[i])],\n      }\n    } else {\n      return {\n        cells: [markdownToSlate(markdown)],\n      }\n    }\n  })\n}\nconst createPluginCell = (elem: Element): ContentCell<SplishPluginState> => {\n  switch (elem.name) {\n    case 'table':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Table,\n            version: '0.0.0',\n          },\n          state: {\n            src: elem.src,\n          },\n        },\n      }\n    case 'spoiler':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Spoiler,\n            version: '0.0.0',\n          },\n          state: {\n            title: elem.title,\n            content: {\n              type: '@splish-me/editor-core/editable',\n              state: {\n                id: v4(),\n                cells: [\n                  {\n                    id: v4(),\n                    rows: createPlugins(elem.content),\n                  },\n                ],\n              },\n            },\n          },\n        },\n      }\n    case 'blockquote':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Blockquote,\n            version: '0.0.0',\n          },\n          state: {\n            child: {\n              type: '@splish-me/editor-core/editable',\n              state: {\n                id: v4(),\n                cells: [\n                  {\n                    id: v4(),\n                    rows: createPlugins(elem.content),\n                  },\n                ],\n              },\n            },\n          },\n        },\n      }\n    case 'injection':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Injection,\n            version: '0.0.0',\n          },\n          state: {\n            description: elem.description,\n            src: elem.src,\n          },\n        },\n      }\n    case 'geogebra':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Geogebra,\n            version: '0.0.0',\n          },\n          state: {\n            description: elem.description,\n            src: elem.src,\n          },\n        },\n      }\n    case 'image':\n      return {\n        content: {\n          plugin: {\n            name: Plugin.Image,\n            version: '0.0.0',\n          },\n          state: {\n            description: elem.description,\n            title: elem.title,\n            src: elem.src,\n            href: (elem as LinkedImagesTMP).href\n              ? (elem as LinkedImagesTMP).href\n              : undefined,\n          },\n        },\n      }\n    case 'code':\n      return {\n        content: {\n          plugin: {\n            name: 'code',\n          },\n          state: {\n            language: elem.language,\n            src: elem.src,\n          },\n        },\n      }\n  }\n}\n\ninterface SplishDocumentIdentifier {\n  type: '@splish-me/editor-core/editable'\n  state: Splish\n}\n\nexport interface SplishCodeState {\n  language: string\n  src: string\n}\nexport interface SplishSpoilerState {\n  title: string\n  content: SplishDocumentIdentifier\n}\n\nexport interface SplishTableState {\n  src: string\n}\n\nexport interface SplishBlockquoteState {\n  child: SplishDocumentIdentifier\n}\n\nexport interface SplishInjectionState {\n  description: string\n  src: string\n}\n\nexport interface SplishGeogebraState {\n  description: string\n  src: string\n}\n\nexport interface SplishImageState {\n  description: string\n  src: string\n  title: string\n  href?: string\n}\n\nexport interface SplishTextState {\n  importFromHtml?: string\n  editorState?: ValueJSON\n}\n\nexport type SplishPluginState =\n  | SplishCodeState\n  | SplishSpoilerState\n  | SplishTableState\n  | SplishBlockquoteState\n  | SplishInjectionState\n  | SplishGeogebraState\n  | SplishImageState\n  | SplishTextState\n\nexport default createPlugins\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\n\nconst codeRegEx = new RegExp(/(\\A|\\n)```(\\S*)\\n([\\s\\S]*?)\\r?\\n?```/m)\nconst spoilerRegEx = new RegExp(/^\\/\\/\\/ (.*)\\n([\\s\\S]*?)(\\n|\\r)+\\/\\/\\//m)\nconst injectionRegEx = new RegExp(/>\\[(.*)\\]\\(((?!ggt\\/).*)\\)/)\nconst geogebraInjectionRegEx = new RegExp(/>\\[(.*)\\]\\(ggt\\/(.*)\\)/)\nconst linkRegEx = new RegExp(\n  /[^!>]\\[(([^[()\\]]*?(\\[.*?\\]\\(.*?\\))?)*?)\\]\\((.*?)\\)/\n)\nconst imagesRegEx = new RegExp(/!\\[(.*?)\\]\\((.*?)( \"(.*)?\")?\\)/)\nconst linkedImagesRegEx = new RegExp(\n  /\\[!\\[(.*?)\\]\\((.*?)( \"(.*)?\")?\\)\\]\\((.*?)\\)/\n)\nconst tableRegEx = new RegExp(/(^|\\n)(((\\|[^|\\r\\n]*)+\\|( |\\t)*(\\r?\\n|\\r)?)+)/)\n\n/**\n * Blockquote RegEx:\n *  1. Negative Lookahead: Ignore when start is injection not blockquote;\n *  2. match /> ?[\\s\\S]+?\n *  3. Lookahead: Match is finished, when two linebreaks, end of line or injection\n */\nconst blockquoteRegEx = new RegExp(\n  /((((\\A|\\n+)(?!>\\[.*?\\]\\(.*?\\))>[\\s\\S]+?)(?=(\\r?\\n\\r?\\n\\w)|$|(>\\[.*?\\]\\(.*?\\))))+)/m\n)\n\nconst extractCode = (normalizedObj: NormalizedObject) =>\n  extract(\n    codeRegEx,\n    (match) => ({\n      name: 'code',\n      language: match[2].trim(),\n      src: match[3],\n    }),\n    normalizedObj\n  )\nconst extractSpoilers = (normalizedObj: NormalizedObject) =>\n  extract(\n    spoilerRegEx,\n    (match) => ({\n      name: 'spoiler',\n      title: match[1],\n      content: normalizeMarkdown(match[2]),\n    }),\n    normalizedObj\n  )\n\nconst extractTable = (normalizedObj: NormalizedObject) =>\n  extract(\n    tableRegEx,\n    (match) => ({\n      name: 'table',\n      src: match[0],\n    }),\n    normalizedObj\n  )\n\nconst extractInjections = (normalizedObj: NormalizedObject) =>\n  extract(\n    injectionRegEx,\n    (match) => ({\n      name: 'injection',\n      description: match[1],\n      src: match[2],\n    }),\n    normalizedObj\n  )\n\nconst extractGeogebra = (normalizedObj: NormalizedObject) =>\n  extract(\n    geogebraInjectionRegEx,\n    (match) => ({\n      name: 'geogebra',\n      description: match[1],\n      src: match[2],\n    }),\n    normalizedObj\n  )\n\nconst extractLinkedImages = (normalizedObj: NormalizedObject) =>\n  extract(\n    linkedImagesRegEx,\n    (match) => ({\n      name: 'image',\n      description: match[1],\n      src: match[2],\n      title: match[4],\n      href: match[5],\n    }),\n    normalizedObj\n  )\n\nconst extractImages = (normalizedObj: NormalizedObject) =>\n  extract(\n    imagesRegEx,\n    (match) => ({\n      name: 'image',\n      description: match[1],\n      src: match[2],\n      title: match[4],\n    }),\n    normalizedObj\n  )\n\nconst extractBlockquote = (normalizedObj: NormalizedObject) =>\n  extract(\n    blockquoteRegEx,\n    (match) => ({\n      name: 'blockquote',\n      content: normalizeMarkdown(match[1].replace(/(^|\\n)>/g, '$1')),\n    }),\n    normalizedObj\n  )\n\nconst normalizeMarkdown = (markdown: string) => {\n  let normalizedObj: NormalizedObject = {\n    normalized: markdown,\n    elements: [],\n  }\n  normalizedObj = extractCode(normalizedObj)\n  normalizedObj = extractSpoilers(normalizedObj)\n  normalizedObj = extractTable(normalizedObj)\n  normalizedObj = extractBlockquote(normalizedObj)\n  normalizedObj = extractInjections(normalizedObj)\n  normalizedObj = extractGeogebra(normalizedObj)\n  normalizedObj = extractLinkedImages(normalizedObj)\n  normalizedObj = extractImages(normalizedObj)\n\n  return normalizedObj\n}\n\nconst extract = (\n  regex: RegExp,\n  createElement: (match: RegExpExecArray) => Element,\n  { normalized, elements }: NormalizedObject\n) => {\n  let match = regex.exec(normalized)\n  while (match !== null) {\n    normalized = normalized.replace(regex, 'ยง' + elements.length + 'ยง')\n    elements = [...elements, createElement(match)]\n\n    match = regex.exec(normalized)\n  }\n  return {\n    normalized: normalized,\n    elements: elements,\n  }\n}\n\nexport interface NormalizedObject {\n  normalized: string\n  elements: Element[]\n}\n\ninterface CodeTMP {\n  name: 'code'\n  language: string\n  src: string\n}\n\ninterface SpoilerTMP {\n  name: 'spoiler'\n  title: string\n  content: ReturnType<typeof normalizeMarkdown>\n}\ninterface TableTMP {\n  name: 'table'\n  src: string\n}\ninterface BlockquoteTMP {\n  name: 'blockquote'\n  content: ReturnType<typeof normalizeMarkdown>\n}\n\ninterface InjectionsTMP {\n  name: 'injection'\n  description: string\n  src: string\n}\ninterface GeogebraTMP {\n  name: 'geogebra'\n  description: string\n  src: string\n}\ninterface ImagesTMP {\n  name: 'image'\n  description: string\n  src: string\n  title?: string\n}\nexport interface LinkedImagesTMP extends ImagesTMP {\n  href: string\n}\n\nexport type Element =\n  | CodeTMP\n  | SpoilerTMP\n  | TableTMP\n  | BlockquoteTMP\n  | InjectionsTMP\n  | GeogebraTMP\n  | LinkedImagesTMP\n  | ImagesTMP\n\nexport default normalizeMarkdown\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { Cell } from '../splishToEdtr/types'\nimport createPlugins from './createPlugin'\nimport normalizeMarkdown from './normalizeMarkdown'\nimport transform from './transform'\n\nconst splitMarkdown = (markdown: string) =>\n  createPlugins(normalizeMarkdown(markdown))\n\ntype Leaf = { size: number; raw: string }\ntype CellBeforeSplit = Leaf | { rows: RowBeforeSplit[] }\ntype RowBeforeSplit = { cells: CellBeforeSplit[] }\n\nfunction isLeaf(cell: CellBeforeSplit): cell is Leaf {\n  const c = cell as Leaf\n  return typeof c.raw !== 'undefined'\n}\nfunction splitCell(cell: CellBeforeSplit): Cell {\n  if (isLeaf(cell)) {\n    return {\n      size: cell.size,\n      rows: splitMarkdown(cell.raw),\n    }\n  } else {\n    const { rows = [] } = cell\n    return {\n      ...cell,\n      rows: rows.map(splitRow),\n    }\n  }\n}\n\nfunction splitRow(row: RowBeforeSplit) {\n  return {\n    ...row,\n    cells: row.cells.map(splitCell),\n  }\n}\n\nfunction split(input: ReturnType<typeof transform>) {\n  return {\n    ...input,\n    cells: input.cells.map(splitCell),\n  }\n}\n\nexport default split\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { Legacy, LegacyRow } from '../splishToEdtr/types'\n\nconst getCellsFromRow = (row: LegacyRow) =>\n  row.map((cell) => ({\n    size: Math.floor(cell.col / 2),\n    raw: cell.content,\n  }))\n\nconst transform = (input: Legacy) => {\n  if (typeof input === 'string') {\n    return {\n      cells: [\n        {\n          rows: [\n            {\n              cells: [\n                {\n                  size: 12,\n                  raw: input,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    }\n  }\n\n  return {\n    cells: [\n      {\n        rows: input.map((row) => ({\n          cells: getCellsFromRow(row),\n        })),\n      },\n    ],\n  }\n}\n\nexport default transform\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport * as R from 'ramda'\nimport {\n  BlockJSON,\n  NodeJSON,\n  ValueJSON,\n  DocumentJSON,\n  InlineJSON,\n  TextJSON,\n} from 'slate'\n\nexport function normalize(value: ValueJSON): ValueJSON {\n  return {\n    ...value,\n    document: value.document ? normalizeNode(value.document)[0] : undefined,\n  }\n}\n\nfunction normalizeNode<A extends NodeJSON>(node: A): A[] {\n  if (isBlock(node)) {\n    if (node?.nodes?.some(isInline) && node?.nodes?.some(isBlock)) {\n      // @ts-ignore\n      return R.chain(normalizeNode, unwrapChildBlocks(node))\n    } else {\n      return [{ ...node, nodes: R.chain(normalizeNode, node.nodes ?? []) }]\n    }\n  } else if (isDocument(node)) {\n    return [{ ...node, nodes: R.chain(normalizeNode, node.nodes ?? []) }]\n  } else {\n    return [node]\n  }\n}\n\nexport function unwrapChildBlocks(node: BlockJSON): BlockJSON[] {\n  if (node.nodes === undefined) return [node]\n\n  const result: BlockJSON[] = []\n  let nodesToInspect = node.nodes\n\n  while (nodesToInspect.length > 0) {\n    const [inlineNodes, tailNodes] = R.splitWhen(isBlock, nodesToInspect)\n\n    if (inlineNodes.length > 0) result.push({ ...node, nodes: inlineNodes })\n    if (tailNodes.length > 0) result.push(tailNodes[0] as BlockJSON)\n\n    nodesToInspect = tailNodes.slice(1)\n  }\n\n  return result\n}\n\nfunction isBlock(node: NodeJSON): node is BlockJSON {\n  return node?.object === 'block'\n}\n\nfunction isDocument(node: NodeJSON): node is DocumentJSON {\n  return node?.object === 'document'\n}\n\nfunction isInline(node: NodeJSON): node is InlineJSON | TextJSON {\n  return node?.object === 'inline' || node?.object === 'text'\n}\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport * as React from 'react'\nimport Html, { Rule } from 'slate-html-serializer'\n// @ts-ignore\nimport { parseFragment } from 'parse5'\nimport { Block, Inline, Mark, Value, ValueJSON } from 'slate'\nimport { normalize } from './normalize-slate'\n\n/**\n * This file provides a serializer for the splish slate state to html\n * and a deserializer for html to edtr-io slate state.\n * All serializers use the node names of the splish editor.\n * All deserializers use the new node names defined in the following variables.\n */\n\nexport const createHeadingNode = (level: number) => `@splish-me/h${level}`\nexport const linkNode = '@splish-me/a'\n\nexport const orderedListNode = 'ordered-list'\nexport const unorderedListNode = 'unordered-list'\nexport const listItemNode = 'list-item'\nexport const listItemChildNode = 'list-item-child'\n\nexport const paragraphNode = 'paragraph'\n\nexport const strongMark = '@splish-me/strong'\nexport const emphasizeMark = '@splish-me/em'\n\nexport const katexBlockNode = '@splish-me/katex-block'\nexport const katexInlineNode = '@splish-me/katex-inline'\n\nexport function convertOldSlate(value: ValueJSON) {\n  const serializer = new Html({\n    rules: [\n      headingSerializer,\n      linkSerializer,\n      listSerializer,\n      paragraphSerializer,\n      richTextSerializer,\n      katexSerializer,\n    ],\n    defaultBlock: { type: paragraphNode },\n    parseHtml: (html: string) => {\n      return parseFragment(html) as HTMLElement\n    },\n  })\n\n  return htmlToSlate(\n    serializer.serialize(Value.fromJSON(value), {\n      render: true,\n    })\n  )\n}\nexport function htmlToSlate(html: string) {\n  const deserializer = new Html({\n    rules: [\n      headingDeserializer,\n      linkDeserializer,\n      listDeserializer,\n      paragraphDeserializer,\n      richTextDeserializer,\n      katexDeserializer,\n      {\n        deserialize(el) {\n          if (el.tagName && el.tagName.toLowerCase() === 'br') {\n            return {\n              object: 'text',\n              text: '\\n',\n            }\n          }\n\n          if (el.nodeName === '#text') {\n            // @ts-ignore\n            if (el.value && el.value.match(/<!--.*?-->/)) return\n\n            return {\n              object: 'text',\n              // @ts-ignore\n              text: el.value,\n            }\n          }\n        },\n      },\n    ],\n    defaultBlock: { type: paragraphNode },\n    parseHtml: (html: string) => {\n      return parseFragment(html) as HTMLElement\n    },\n  })\n\n  return normalize(deserializer.deserialize(html, { toJSON: true }))\n}\n\ntype HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6\n\nconst headingDeserializer: Rule = {\n  deserialize(el, next) {\n    const match = el.tagName.toLowerCase().match(/h([1-6])/)\n\n    if (match) {\n      const level = parseInt(match[1], 10) as HeadingLevel\n\n      return {\n        object: 'block',\n        type: createHeadingNode(level),\n        nodes: next(el.childNodes),\n      }\n    }\n  },\n}\n\nconst linkDeserializer: Rule = {\n  deserialize(el, next) {\n    if (el.tagName.toLowerCase() === 'a') {\n      // @ts-ignore FIXME\n      const attr = el.attrs.find(({ name }) => name === 'href')\n\n      return {\n        object: 'inline',\n        type: linkNode,\n        nodes: next(el.childNodes),\n        data: {\n          href: attr ? attr.value : '',\n        },\n      }\n    }\n  },\n}\n\nconst listDeserializer: Rule = {\n  deserialize(el, next) {\n    switch (el.tagName.toLowerCase()) {\n      case 'ol':\n        return {\n          object: 'block',\n          type: orderedListNode,\n          nodes: next(el.childNodes),\n        }\n      case 'ul':\n        return {\n          object: 'block',\n          type: unorderedListNode,\n          nodes: next(el.childNodes),\n        }\n      case 'li':\n        return {\n          object: 'block',\n          type: listItemNode,\n          nodes: [\n            {\n              object: 'block',\n              type: listItemChildNode,\n              nodes: next(el.childNodes),\n            },\n          ],\n        }\n    }\n  },\n}\n\nconst paragraphDeserializer: Rule = {\n  deserialize(el, next) {\n    if (el.tagName.toLowerCase() === 'p') {\n      return {\n        object: 'block',\n        type: paragraphNode,\n        nodes: next(el.childNodes),\n      }\n    }\n  },\n}\n\nconst richTextDeserializer: Rule = {\n  deserialize(el, next) {\n    switch (el.tagName.toLowerCase()) {\n      case 'strong':\n      case 'b':\n        return {\n          object: 'mark',\n          type: strongMark,\n          nodes: next(el.childNodes),\n        }\n      case 'em':\n      case 'i':\n        return {\n          object: 'mark',\n          type: emphasizeMark,\n          nodes: next(el.childNodes),\n        }\n    }\n  },\n}\n\nconst katexDeserializer: Rule = {\n  deserialize(el, next) {\n    switch (el.tagName.toLowerCase()) {\n      case 'katexblock':\n        return {\n          object: 'block',\n          type: katexBlockNode,\n          data: {\n            //@ts-ignore\n            formula: el.childNodes[0].value,\n            inline: false,\n          },\n          nodes: next(el.childNodes),\n        }\n      case 'katexinline':\n        return {\n          object: 'inline',\n          type: katexInlineNode,\n          data: {\n            //@ts-ignore\n            formula: el.childNodes[0].value,\n            inline: true,\n          },\n          nodes: next(el.childNodes),\n        }\n      default:\n        return\n    }\n  },\n}\n\nconst headingSerializer: Rule = {\n  serialize(obj, children) {\n    const block = obj as Block\n\n    if (block.object === 'block') {\n      const match = block.type.match(/@splish-me\\/h([1-6])/)\n\n      if (match) {\n        const level = parseInt(match[1], 10) as HeadingLevel\n\n        return React.createElement(\n          `h${level}`,\n          {\n            node: obj,\n          },\n          children\n        )\n      }\n    }\n  },\n}\n\nconst linkSerializer: Rule = {\n  serialize(obj, children) {\n    const block = obj as Inline\n\n    if (block.object === 'inline' && block.type === linkNode) {\n      const href = obj.data.get('href')\n      return <a href={href}>{children}</a>\n    }\n  },\n}\n\nconst listSerializer: Rule = {\n  serialize(obj, children) {\n    const block = obj as Block\n\n    switch (block.type) {\n      case '@splish-me/ul':\n        return <ul>{children}</ul>\n      case '@splish-me/ol':\n        return <ol>{children}</ol>\n      case '@splish-me/li':\n        return <li>{children}</li>\n    }\n  },\n}\nconst paragraphSerializer: Rule = {\n  serialize(obj, children) {\n    const block = obj as Block\n    if (block.type === 'paragraph' || block.type === '@splish-me/p') {\n      return <p>{children}</p>\n    }\n  },\n}\n\nconst richTextSerializer: Rule = {\n  serialize(obj, children) {\n    const mark = obj as Mark\n    if (mark.object === 'mark') {\n      switch (mark.type) {\n        case '@splish-me/strong':\n          return <strong>{children}</strong>\n        case '@splish-me/em':\n          return <em>{children}</em>\n      }\n    }\n  },\n}\n\nconst katexSerializer: Rule = {\n  serialize(obj, children) {\n    const block = obj as Block\n    const inline = obj as Inline\n\n    if (block.object === 'block' && block.type === katexBlockNode) {\n      const formula = obj.data.get('formula')\n      // @ts-ignore\n      return <katexblock>{formula}</katexblock>\n    } else if (inline.object === 'inline' && inline.type === katexInlineNode) {\n      const formula = obj.data.get('formula')\n      // @ts-ignore\n      return <katexinline>{formula}</katexinline>\n    }\n  },\n}\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport { serializer } from '@edtr-io/plugin-text'\nimport {\n  SplishBlockquoteState,\n  SplishCodeState,\n  SplishGeogebraState,\n  SplishImageState,\n  SplishInjectionState,\n  SplishSpoilerState,\n  SplishTableState,\n  SplishTextState,\n} from '../legacyToSplish/createPlugin'\nimport { convertOldSlate, htmlToSlate } from './convertSlate'\nimport { ContentCell, OtherPlugin, Plugin } from './types'\nimport { convertSplishToEdtrIO } from '..'\n\nexport function convertPlugin(cell: ContentCell): OtherPlugin {\n  const { plugin, state } = cell.content\n  switch (plugin.name) {\n    case Plugin.Blockquote:\n      const blockquoteState = state as SplishBlockquoteState\n      return {\n        plugin: 'important',\n        state: convertSplishToEdtrIO(blockquoteState.child.state),\n      }\n    case Plugin.Image:\n      const imageState = state as SplishImageState\n      return {\n        plugin: 'image',\n        state: {\n          alt: imageState.description,\n          link: imageState.href\n            ? {\n                href: imageState.href,\n                openInNewTab: false,\n              }\n            : undefined,\n          src: imageState.src,\n          maxWidth: undefined,\n        },\n      }\n    case Plugin.Injection:\n      const injectionState = state as SplishInjectionState\n      return {\n        plugin: 'injection',\n        state: injectionState.src,\n      }\n    case Plugin.Spoiler:\n      const spoilerState = state as SplishSpoilerState\n      return {\n        plugin: 'spoiler',\n        state: {\n          title: spoilerState.title,\n          content: convertSplishToEdtrIO(spoilerState.content.state),\n        },\n      }\n    case Plugin.Text:\n      const textState = state as SplishTextState\n      if (textState.editorState) {\n        return {\n          plugin: 'text',\n          state: serializer.serialize(convertOldSlate(textState.editorState)),\n        }\n      } else {\n        return {\n          plugin: 'text',\n          state: serializer.serialize(\n            htmlToSlate(textState.importFromHtml || '')\n          ),\n        }\n      }\n    case Plugin.Table:\n      const tableState = state as SplishTableState\n      return {\n        plugin: 'table',\n        state: tableState.src,\n      }\n    case Plugin.Geogebra:\n      const geogebraState = state as SplishGeogebraState\n      return {\n        plugin: 'geogebra',\n        state: geogebraState.src,\n      }\n    case 'code':\n      const code = state as SplishCodeState\n      return {\n        plugin: 'highlight',\n        state: {\n          language: code.language,\n          code: code.src,\n          showLineNumbers: false,\n        },\n      }\n    default:\n      return {\n        plugin: 'error',\n        state: {\n          plugin: plugin.name,\n          state: state,\n        },\n      }\n  }\n}\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport * as R from 'ramda'\n\nimport { Cell, isContentCell, LayoutPlugin, OtherPlugin, Row } from './types'\nimport { convertPlugin } from './convertPlugins'\n\nexport {\n  Plugin,\n  OtherPlugin,\n  LayoutPlugin,\n  RowsPlugin,\n  Edtr,\n  Legacy,\n  Splish,\n  isSplish,\n  isEdtr,\n} from './types'\n\nexport function convertRow(row: Row): (LayoutPlugin | OtherPlugin)[] {\n  // no cells, then end the recursion\n  if (!row.cells.length) return []\n\n  // if more than one cell, than convert to special plugin 'layout'\n  if (row.cells.length > 1) {\n    return [\n      {\n        plugin: 'layout',\n        state: row.cells.map((cell): LayoutPlugin['state'][0] => {\n          return {\n            width: cell.size || 12,\n            child: {\n              plugin: 'rows',\n              state: convertCell(cell),\n            },\n          }\n        }),\n      },\n    ]\n  }\n\n  // otherwise continue with converting the only cell\n  return convertCell(row.cells[0])\n}\n\nfunction convertCell(cell: Cell): (LayoutPlugin | OtherPlugin)[] {\n  if (isContentCell(cell)) {\n    return [convertPlugin(cell)]\n  } else {\n    return R.reduce(\n      (plugins, row) => R.concat(plugins, convertRow(row)),\n      [] as (LayoutPlugin | OtherPlugin)[],\n      cell.rows\n    )\n  }\n}\n","/**\n * This file is part of Serlo.org.\n *\n * Copyright (c) 2013-2021 Serlo Education e.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @copyright Copyright (c) 2013-2021 Serlo Education e.V.\n * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n * @link      https://github.com/serlo-org/serlo.org for the canonical source repository\n */\nimport split from './legacyToSplish/split'\nimport transform from './legacyToSplish/transform'\nimport {\n  Legacy,\n  Splish,\n  RowsPlugin,\n  isSplish,\n  convertRow,\n} from './splishToEdtr'\n\nexport function convert(content: Legacy | Splish): RowsPlugin {\n  if (!content) return { plugin: 'rows', state: [] }\n  const splish = isSplish(content)\n    ? content\n    : convertLegacyToSplish(content, '')\n  return convertSplishToEdtrIO(splish)\n}\n\nexport function convertLegacyToSplish(content: Legacy, id: string): Splish {\n  const cells = split(transform(content))\n  return {\n    ...cells,\n    id,\n  }\n}\n\nexport function convertSplishToEdtrIO(content: Splish): RowsPlugin {\n  return {\n    plugin: 'rows',\n    state: convertRow(content),\n  }\n}\n\nexport {\n  OtherPlugin,\n  LayoutPlugin,\n  RowsPlugin,\n  Edtr,\n  Legacy,\n  Splish,\n  isSplish,\n  isEdtr,\n} from './splishToEdtr'\n"],"names":["Plugin","isSplish","content","undefined","cells","renderMarkdown","input","html","converter","makeHtml","replace","markdownToSlate","markdown","plugin","name","Text","version","state","importFromHtml","createPlugins","elements","split","normalized","map","s","trim","filter","length","elementIDMatch","exec","i","parseInt","createPluginCell","elem","Table","src","Spoiler","title","type","id","v4","rows","Blockquote","child","Injection","description","Geogebra","Image","href","language","codeRegEx","RegExp","spoilerRegEx","injectionRegEx","geogebraInjectionRegEx","imagesRegEx","linkedImagesRegEx","tableRegEx","blockquoteRegEx","normalizeMarkdown","normalizedObj","extract","match","extractImages","extractLinkedImages","extractGeogebra","extractInjections","extractBlockquote","extractTable","extractSpoilers","extractCode","regex","createElement","splitMarkdown","splitCell","cell","raw","isLeaf","size","splitRow","row","getCellsFromRow","Math","floor","col","normalizeNode","node","isBlock","nodes","some","isInline","_node$nodes2","R","result","nodesToInspect","inlineNodes","tailNodes","push","slice","unwrapChildBlocks","object","isDocument","createHeadingNode","level","htmlToSlate","value","Html","rules","headingDeserializer","linkDeserializer","listDeserializer","paragraphDeserializer","richTextDeserializer","katexDeserializer","deserialize","el","tagName","toLowerCase","text","nodeName","defaultBlock","parseHtml","parseFragment","toJSON","document","next","childNodes","attr","attrs","find","data","formula","inline","headingSerializer","serialize","obj","children","React","linkSerializer","get","listSerializer","paragraphSerializer","richTextSerializer","katexSerializer","convertPlugin","convertSplishToEdtrIO","alt","link","openInNewTab","maxWidth","textState","editorState","serializer","Value","fromJSON","render","code","showLineNumbers","convertRow","width","convertCell","isContentCell","plugins","convertLegacyToSplish"],"mappings":"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"}