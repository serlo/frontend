{"version":3,"file":"plugin-equations.cjs.production.min.js","sources":["../src/sign.tsx","../src/renderer.tsx","../src/editor.tsx","../src/index.ts"],"sourcesContent":["export enum Sign {\n  AlmostEqualTo = 'almost-equal-to',\n  Equals = 'equals',\n  Estimates = 'estimates',\n  GreaterThan = 'greater-than',\n  GreaterThanOrEqual = 'greater-than-or-equal',\n  LessThan = 'less-than',\n  LessThanOrEqual = 'less-than-or-equal',\n  NotEqualTo = 'not-equal-to',\n}\n\nexport function renderSignToString(sign: Sign): string {\n  switch (sign) {\n    case Sign.AlmostEqualTo:\n      return '≈'\n    case Sign.Equals:\n      return '='\n    case Sign.Estimates:\n      return '≙'\n    case Sign.GreaterThan:\n      return '>'\n    case Sign.GreaterThanOrEqual:\n      return '≥'\n    case Sign.LessThan:\n      return '<'\n    case Sign.LessThanOrEqual:\n      return '≤'\n    case Sign.NotEqualTo:\n      return '≠'\n  }\n}\n","import { useScopedStore } from '@edtr-io/core'\nimport { MathRenderer } from '@edtr-io/math'\nimport { isEmpty } from '@edtr-io/store'\nimport { styled } from '@edtr-io/ui'\nimport { Fragment } from 'react'\nimport React from 'react'\n\nimport { EquationsProps } from '.'\nimport { renderSignToString, Sign } from './sign'\n\nexport const TableWrapper = styled.div({\n  padding: '10px 0',\n})\n\nexport const Table = styled.table({\n  whiteSpace: 'nowrap',\n})\n\nexport const MathTd = styled.td({ verticalAlign: 'baseline' })\n\nexport const LeftTd = styled(MathTd)({\n  textAlign: 'right',\n})\n\nexport const SignTd = styled.td({\n  padding: '0 3px',\n  textAlign: 'center',\n  verticalAlign: 'baseline',\n})\n\nexport const TransformTd = styled(MathTd)({\n  paddingLeft: '5px',\n})\n\nexport const ExplanationTr = styled.tr({ div: { margin: 0 } })\nexport const FirstExplanationTr = styled(ExplanationTr)({\n  textAlign: 'center',\n  div: { margin: 0 },\n})\n\nexport enum TransformationTarget {\n  Equation = 'equation',\n  Term = 'term',\n}\n\nexport function EquationsRenderer({ state }: EquationsProps) {\n  const store = useScopedStore()\n  const transformationTarget = toTransformationTarget(\n    state.transformationTarget.value\n  )\n\n  const tdPadding = 'px-1 pt-1 pb-3'\n\n  return (\n    <TableWrapper>\n      <Table>\n        <tbody>\n          {renderFirstExplanation()}\n          {state.steps.map((step, row) => {\n            return (\n              <Fragment key={row}>\n                <tr>\n                  <LeftTd className={tdPadding}>\n                    {step.left.value ? (\n                      <MathRenderer inline state={step.left.value} />\n                    ) : null}\n                  </LeftTd>\n                  <SignTd className={tdPadding}>\n                    {(row !== 0 ||\n                      transformationTarget !== TransformationTarget.Term) && (\n                      <MathRenderer\n                        inline\n                        state={renderSignToString(step.sign.value as Sign)}\n                      />\n                    )}\n                  </SignTd>\n                  <MathTd className={tdPadding}>\n                    {step.right.value ? (\n                      <MathRenderer inline state={step.right.value} />\n                    ) : null}\n                  </MathTd>\n                  <TransformTd>\n                    {step.transform.value ? (\n                      <>\n                        |\n                        <MathRenderer inline state={step.transform.value} />\n                      </>\n                    ) : null}\n                  </TransformTd>\n                </tr>\n                {isEmpty(step.explanation.id)(store.getState()) ? null : (\n                  <ExplanationTr>\n                    <td />\n                    {renderDownArrow()}\n                    <td colSpan={2} className={tdPadding}>\n                      {step.explanation.render()}\n                    </td>\n                  </ExplanationTr>\n                )}\n              </Fragment>\n            )\n          })}\n        </tbody>\n      </Table>\n    </TableWrapper>\n  )\n\n  function renderFirstExplanation() {\n    if (isEmpty(state.firstExplanation.id)(store.getState())) return\n\n    return (\n      <>\n        <FirstExplanationTr>\n          <td colSpan={3} className={tdPadding}>\n            {state.firstExplanation.render()}\n          </td>\n        </FirstExplanationTr>\n        <tr style={{ height: '30px' }}>\n          <td />\n          {renderDownArrow()}\n        </tr>\n      </>\n    )\n  }\n}\n\nexport function renderDownArrow() {\n  const downArrow = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <marker\n          id=\"arrow\"\n          markerWidth=\"10\"\n          markerHeight=\"10\"\n          orient=\"auto\"\n          markerUnits=\"strokeWidth\"\n          refX=\"10\"\n          refY=\"5\"\n          viewBox=\"0 0 20 10\"\n        >\n          <path\n            d=\"M 0,0 l 10,5 l -10,5\"\n            stroke=\"#000\"\n            stroke-width=\"2\"\n            fill=\"none\"\n            vector-effect=\"non-scaling-size\"\n          />\n        </marker>\n      </defs>\n\n      <line\n        x1=\"10\"\n        y1=\"0%\"\n        x2=\"10\"\n        y2=\"99%\"\n        stroke=\"#000\"\n        stroke-width=\"2\"\n        marker-end=\"url(#arrow)\"\n        vector-effect=\"non-scaling-stroke\"\n      />\n    </svg>`\n  const downArrowBase64 = Buffer.from(downArrow).toString('base64')\n\n  return (\n    <td\n      style={{\n        backgroundImage: `url('data:image/svg+xml;base64,${downArrowBase64}')`,\n        backgroundSize: '20px calc(100% - 10px)',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center 5px',\n      }}\n    />\n  )\n}\n\nexport function toTransformationTarget(text: string): TransformationTarget {\n  return isTransformationTarget(text) ? text : TransformationTarget.Equation\n}\n\nfunction isTransformationTarget(text: string): text is TransformationTarget {\n  return Object.values<string>(TransformationTarget).includes(text)\n}\n","import { HotKeys, useScopedSelector, useScopedStore } from '@edtr-io/core'\n// eslint-disable-next-line import/no-internal-modules\nimport { PreferenceContext, setDefaultPreference } from '@edtr-io/core/beta'\n// eslint-disable-next-line import/no-internal-modules\nimport { AddButton } from '@edtr-io/editor-ui/internal'\nimport { MathEditor } from '@edtr-io/math'\nimport { StateTypeReturnType, StringStateType } from '@edtr-io/plugin'\nimport {\n  focus,\n  focusNext,\n  focusPrevious,\n  getFocused,\n  isEmpty,\n} from '@edtr-io/store'\nimport { edtrDragHandle, EdtrIcon, Icon, styled } from '@edtr-io/ui'\nimport { faXmark } from '@fortawesome/free-solid-svg-icons'\nimport { includes } from 'ramda'\nimport { useContext, useEffect, useState } from 'react'\nimport React from 'react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\n\nimport { EquationsProps, EquationsConfig, stepProps } from '.'\nimport {\n  EquationsRenderer,\n  FirstExplanationTr,\n  ExplanationTr,\n  LeftTd,\n  MathTd,\n  renderDownArrow,\n  SignTd,\n  Table,\n  TableWrapper,\n  toTransformationTarget,\n  TransformationTarget,\n  TransformTd,\n} from './renderer'\nimport { renderSignToString, Sign } from './sign'\n\nenum StepSegment {\n  Left = 0,\n  Right = 1,\n  Transform = 2,\n  Explanation = 3,\n}\n\nconst preferenceKey = 'katex:usevisualmath'\n\nsetDefaultPreference(preferenceKey, true)\n\nconst RemoveButton = styled.button({\n  outline: 'none',\n  width: '35px',\n  border: 'none',\n  background: 'transparent',\n})\nconst DragButton = styled.span({\n  cursor: 'grab',\n  paddingRight: '5px',\n})\n\nexport function EquationsEditor(props: EquationsProps) {\n  const { focused, state, config } = props\n\n  const store = useScopedStore()\n  const focusedElement = useScopedSelector(getFocused())\n  const nestedFocus =\n    focused ||\n    includes(\n      focusedElement,\n      props.state.steps.map((step) => step.explanation.id)\n    ) ||\n    focusedElement === state.firstExplanation.id\n\n  const transformationTarget = toTransformationTarget(\n    state.transformationTarget.value\n  )\n\n  const gridFocus = useGridFocus({\n    rows: state.steps.length,\n    columns: 4,\n    focusNext: () => store.dispatch(focusNext()),\n    focusPrevious: () => store.dispatch(focusPrevious()),\n    transformationTarget,\n    onFocusChanged: (state) => {\n      if (state === 'firstExplanation') {\n        store.dispatch(focus(props.state.firstExplanation.id))\n      } else if (state.column === StepSegment.Explanation) {\n        store.dispatch(focus(props.state.steps[state.row].explanation.id))\n      } else {\n        store.dispatch(focus(props.id))\n      }\n    },\n  })\n\n  useEffect(() => {\n    if (nestedFocus) {\n      gridFocus.setFocus({\n        row: 0,\n        column: firstColumn(transformationTarget),\n      })\n      store.dispatch(focus(props.id))\n    }\n    //prevents loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nestedFocus])\n\n  if (!nestedFocus) return <EquationsRenderer {...props} />\n\n  return (\n    <HotKeys\n      allowChanges\n      keyMap={{\n        FOCUS_NEXT_OR_INSERT: 'tab',\n        FOCUS_PREVIOUS: 'shift+tab',\n        INSERT: 'return',\n      }}\n      handlers={{\n        FOCUS_NEXT_OR_INSERT: (e) => {\n          handleKeyDown(e, () => {\n            if (\n              gridFocus.isFocused({\n                row: state.steps.length - 1,\n                column: lastColumn(transformationTarget),\n              })\n            ) {\n              const index = state.steps.length\n              insertNewEquationAt(index)\n              gridFocus.setFocus({\n                row: index - 1,\n                column: StepSegment.Explanation,\n              })\n            } else {\n              gridFocus.moveRight()\n            }\n          })\n        },\n        FOCUS_PREVIOUS: (e) => {\n          handleKeyDown(e, () => gridFocus.moveLeft())\n        },\n        INSERT: (e) => {\n          handleKeyDown(e, () => {\n            if (!gridFocus.focus || gridFocus.focus === 'firstExplanation')\n              return\n            insertNewEquationWithFocus(gridFocus.focus.row + 1)\n          })\n        },\n      }}\n    >\n      <>\n        {props.renderIntoSettings(\n          <div>\n            <label htmlFor=\"transformationTarget\">{config.i18n.mode}:</label>{' '}\n            <select\n              id=\"transformationTarget\"\n              value={transformationTarget}\n              onChange={(e) => state.transformationTarget.set(e.target.value)}\n            >\n              <option value={TransformationTarget.Equation}>\n                {config.i18n.transformationOfEquations}\n              </option>\n              <option value={TransformationTarget.Term}>\n                {config.i18n.transformationOfTerms}\n              </option>\n            </select>\n          </div>\n        )}\n        <TableWrapper>\n          <DragDropContext\n            onDragEnd={(result) => {\n              const { source, destination } = result\n              if (!destination) return\n              state.steps.move(source.index, destination.index)\n            }}\n          >\n            <Droppable droppableId=\"default\">\n              {(provided) => {\n                return (\n                  <Table ref={provided.innerRef} {...provided.droppableProps}>\n                    {renderFirstExplanation()}\n                    {state.steps.map((step, row) => {\n                      return (\n                        <Draggable\n                          key={step.explanation.id}\n                          draggableId={step.explanation.id}\n                          index={row}\n                        >\n                          {(provided) => {\n                            return (\n                              <tbody\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                              >\n                                <tr>\n                                  <td>\n                                    <DragButton\n                                      {...provided.dragHandleProps}\n                                      tabIndex={-1}\n                                    >\n                                      <EdtrIcon icon={edtrDragHandle} />\n                                    </DragButton>\n                                  </td>\n                                  <StepEditor\n                                    gridFocus={gridFocus}\n                                    row={row}\n                                    state={step}\n                                    transformationTarget={transformationTarget}\n                                    config={config}\n                                  />\n                                  <td>\n                                    <RemoveButton\n                                      tabIndex={-1}\n                                      onClick={() => state.steps.remove(row)}\n                                    >\n                                      <Icon icon={faXmark} />\n                                    </RemoveButton>\n                                  </td>\n                                </tr>\n                                {renderExplantionTr()}\n                              </tbody>\n                            )\n                          }}\n                        </Draggable>\n                      )\n\n                      function renderExplantionTr() {\n                        if (row === state.steps.length - 1) return null\n\n                        return (\n                          <ExplanationTr\n                            onFocus={() =>\n                              gridFocus.setFocus({\n                                row,\n                                column: StepSegment.Explanation,\n                              })\n                            }\n                          >\n                            {transformationTarget ===\n                              TransformationTarget.Equation && <td />}\n                            <td />\n                            {!isEmpty(step.explanation.id)(store.getState()) ? (\n                              renderDownArrow()\n                            ) : (\n                              <td />\n                            )}\n                            <td colSpan={2}>\n                              {step.explanation.render({\n                                config: {\n                                  placeholder:\n                                    row === 0 &&\n                                    transformationTarget ===\n                                      TransformationTarget.Term\n                                      ? config.i18n.combineLikeTerms\n                                      : config.i18n.explanation,\n                                },\n                              })}\n                            </td>\n                          </ExplanationTr>\n                        )\n                      }\n                    })}\n                    {provided.placeholder}\n                  </Table>\n                )\n              }}\n            </Droppable>\n          </DragDropContext>\n          {renderAddButton()}\n        </TableWrapper>\n      </>\n    </HotKeys>\n  )\n\n  function renderFirstExplanation() {\n    if (transformationTarget === TransformationTarget.Term) return\n\n    return (\n      <tbody onFocus={() => gridFocus.setFocus('firstExplanation')}>\n        <FirstExplanationTr>\n          <td />\n          <td colSpan={3}>\n            {state.firstExplanation.render({\n              config: {\n                placeholder: config.i18n?.firstExplanation,\n              },\n            })}\n          </td>\n        </FirstExplanationTr>\n        <tr style={{ height: '30px' }}>\n          <td />\n          <td />\n          {!isEmpty(state.firstExplanation.id)(store.getState())\n            ? renderDownArrow()\n            : null}\n        </tr>\n      </tbody>\n    )\n  }\n\n  function handleKeyDown(e: KeyboardEvent | undefined, next: () => void) {\n    e && e.preventDefault()\n    next()\n  }\n\n  function insertNewEquationAt(index: number) {\n    state.steps.insert(index, {\n      left: '',\n      sign: state.steps[index - 1].sign.value,\n      right: '',\n      transform: '',\n      explanation: { plugin: 'text' },\n    })\n  }\n\n  function insertNewEquationWithFocus(index: number) {\n    insertNewEquationAt(index)\n    gridFocus.setFocus({\n      row: index,\n      column: firstColumn(transformationTarget),\n    })\n  }\n\n  function renderAddButton() {\n    if (!nestedFocus) return\n\n    return (\n      <AddButton onClick={() => insertNewEquationWithFocus(state.steps.length)}>\n        {config.i18n.addNew}\n      </AddButton>\n    )\n  }\n}\n\nconst DropDown = styled.select({\n  height: '30px',\n  width: '35px',\n  marginLeft: '15px',\n  marginRight: '10px',\n  backgroundColor: 'lightgrey',\n  border: '1px solid lightgrey',\n  borderRadius: '5px',\n})\n\ninterface StepEditorProps {\n  gridFocus: GridFocus\n  row: number\n  state: StateTypeReturnType<typeof stepProps>\n  transformationTarget: TransformationTarget\n  config: EquationsConfig\n}\n\nfunction StepEditor(props: StepEditorProps) {\n  const { gridFocus, row, state, transformationTarget, config } = props\n\n  return (\n    <>\n      {transformationTarget === TransformationTarget.Equation && (\n        <LeftTd\n          onClick={() => gridFocus.setFocus({ row, column: StepSegment.Left })}\n        >\n          <InlineMath\n            focused={gridFocus.isFocused({ row, column: StepSegment.Left })}\n            placeholder={row === 0 ? '3x+1' : `[${config.i18n.leftHandSide}]`}\n            state={state.left}\n            onChange={(src) => state.left.set(src)}\n            onFocusNext={() => gridFocus.moveRight()}\n            onFocusPrevious={() => gridFocus.moveLeft()}\n          />\n        </LeftTd>\n      )}\n      <SignTd>\n        {(transformationTarget === 'equation' || row !== 0) && (\n          <DropDown\n            tabIndex={-1}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n              state.sign.set(e.target.value)\n            }}\n            value={state.sign.value}\n          >\n            {[\n              Sign.Equals,\n              Sign.GreaterThan,\n              Sign.LessThan,\n              Sign.GreaterThanOrEqual,\n              Sign.LessThanOrEqual,\n              Sign.NotEqualTo,\n              Sign.AlmostEqualTo,\n              Sign.Estimates,\n            ].map((sign) => {\n              return (\n                <option key={sign} value={sign}>\n                  {renderSignToString(sign)}\n                </option>\n              )\n            })}\n          </DropDown>\n        )}\n      </SignTd>\n      <MathTd\n        onClick={() => gridFocus.setFocus({ row, column: StepSegment.Right })}\n      >\n        <InlineMath\n          focused={gridFocus.isFocused({ row, column: StepSegment.Right })}\n          placeholder={\n            row === 0\n              ? '4x+3x'\n              : transformationTarget === TransformationTarget.Term\n              ? `[${config.i18n.term}]`\n              : `[${config.i18n.rightHandSide}]`\n          }\n          state={state.right}\n          onChange={(src) => state.right.set(src)}\n          onFocusNext={() => gridFocus.moveRight()}\n          onFocusPrevious={() => gridFocus.moveLeft()}\n        />\n      </MathTd>\n      {transformationTarget === TransformationTarget.Equation && (\n        <TransformTd\n          onClick={() =>\n            gridFocus.setFocus({ row, column: StepSegment.Transform })\n          }\n        >\n          |{' '}\n          <InlineMath\n            focused={gridFocus.isFocused({\n              row,\n              column: StepSegment.Transform,\n            })}\n            placeholder={\n              row === 0\n                ? config.i18n.transformationExample\n                : `[${config.i18n.transformation}]`\n            }\n            state={state.transform}\n            onChange={(src) => state.transform.set(src)}\n            onFocusNext={() => gridFocus.moveRight()}\n            onFocusPrevious={() => gridFocus.moveLeft()}\n          />\n        </TransformTd>\n      )}\n    </>\n  )\n}\n\ninterface InlineMathProps {\n  state: StateTypeReturnType<StringStateType>\n  placeholder: string\n  onChange: (state: string) => void\n  onFocusNext: () => void\n  onFocusPrevious: () => void\n  focused?: boolean\n  prefix?: string\n  suffix?: string\n}\n\nfunction InlineMath(props: InlineMathProps) {\n  const {\n    focused,\n    onFocusNext,\n    onFocusPrevious,\n    onChange,\n    state,\n    prefix = '',\n    suffix = '',\n  } = props\n\n  const preferences = useContext(PreferenceContext)\n\n  return (\n    <MathEditor\n      readOnly={!focused}\n      state={`${prefix}${state.value}${suffix}`}\n      config={{ i18n: { placeholder: props.placeholder } }}\n      inline\n      disableBlock\n      visual={preferences.getKey(preferenceKey) === true}\n      onEditorChange={(visual) => {\n        preferences.setKey(preferenceKey, visual)\n      }}\n      onInlineChange={() => {}}\n      onChange={onChange}\n      onMoveOutRight={onFocusNext}\n      onMoveOutLeft={onFocusPrevious}\n    />\n  )\n}\n\ntype GridFocusState =\n  | {\n      row: number\n      column: number\n    }\n  | 'firstExplanation'\n\ninterface GridFocus {\n  focus: GridFocusState | null\n  isFocused: (cell: GridFocusState) => boolean\n  setFocus: (cell: GridFocusState) => void\n  moveRight: () => void\n  moveLeft: () => void\n}\n\nfunction useGridFocus({\n  rows,\n  columns,\n  focusNext,\n  focusPrevious,\n  onFocusChanged,\n  transformationTarget,\n}: {\n  rows: number\n  columns: number\n  focusNext: () => void\n  focusPrevious: () => void\n  onFocusChanged: (args: GridFocusState) => void\n  transformationTarget: TransformationTarget\n}): GridFocus {\n  const [focus, setFocusState] = useState<GridFocusState | null>(null)\n  const setFocus = (state: GridFocusState) => {\n    onFocusChanged(state)\n    setFocusState(state)\n  }\n  const isFocused = (state: GridFocusState) => {\n    if (focus === null) return false\n    if (focus === 'firstExplanation') return state === focus\n\n    return (\n      state !== 'firstExplanation' &&\n      focus.row === state.row &&\n      focus.column === state.column\n    )\n  }\n\n  return {\n    focus,\n    isFocused,\n    setFocus(state) {\n      if (!isFocused(state)) setFocus(state)\n    },\n    moveRight() {\n      if (focus === null) return\n      if (focus === 'firstExplanation') {\n        setFocus({ row: 0, column: firstColumn(transformationTarget) })\n        return\n      }\n\n      if (\n        focus.row === rows - 1 &&\n        focus.column === lastColumn(transformationTarget)\n      ) {\n        focusNext()\n      } else if (transformationTarget === TransformationTarget.Term) {\n        if (focus.column === StepSegment.Right) {\n          setFocus({ row: focus.row, column: StepSegment.Explanation })\n        } else {\n          setFocus({\n            row: focus.row + 1,\n            column: firstColumn(transformationTarget),\n          })\n        }\n      } else if (focus.column === columns - 1) {\n        setFocus({ row: focus.row + 1, column: StepSegment.Left })\n      } else {\n        setFocus({ row: focus.row, column: focus.column + 1 })\n      }\n    },\n    moveLeft() {\n      if (focus === null) return\n      if (focus === 'firstExplanation') {\n        focusPrevious()\n        return\n      }\n\n      if (transformationTarget === TransformationTarget.Term) {\n        if (focus.row === 0 && focus.column === StepSegment.Right) {\n          focusPrevious()\n        } else if (focus.column === StepSegment.Right) {\n          setFocus({ row: focus.row - 1, column: StepSegment.Explanation })\n        } else {\n          setFocus({ row: focus.row, column: StepSegment.Right })\n        }\n      } else {\n        if (focus.column === 0) {\n          if (focus.row === 0) {\n            setFocus('firstExplanation')\n          } else {\n            setFocus({ row: focus.row - 1, column: columns - 1 })\n          }\n        } else {\n          setFocus({ row: focus.row, column: focus.column - 1 })\n        }\n      }\n    },\n  }\n}\n\nfunction firstColumn(transformationTarget: TransformationTarget) {\n  return transformationTarget === TransformationTarget.Term\n    ? StepSegment.Right\n    : StepSegment.Left\n}\n\nfunction lastColumn(transformationTarget: TransformationTarget) {\n  return transformationTarget === TransformationTarget.Term\n    ? StepSegment.Right\n    : StepSegment.Transform\n}\n","import {\n  child,\n  list,\n  object,\n  EditorPlugin,\n  EditorPluginProps,\n  string,\n  ObjectStateType,\n  StringStateType,\n  ChildStateType,\n  ListStateType\n} from '@edtr-io/plugin'\n\nimport { EquationsEditor } from './editor'\nimport { Sign, renderSignToString } from './sign'\n\n/** @public */\nexport { Sign, renderSignToString }\n\ntype StepPropsType = ObjectStateType<{ left: StringStateType, sign: StringStateType, right: StringStateType, transform: StringStateType, explanation: ChildStateType<string, unknown>}>\n\nexport const stepProps: StepPropsType = object({\n  left: string(''),\n  sign: string(Sign.Equals),\n  right: string(''),\n  transform: string(''),\n  explanation: child({ plugin: 'text', config: { registry: [] } }),\n})\n\nconst equationsState: ObjectStateType<{ steps: ListStateType<StepPropsType>, firstExplanation: ChildStateType<string, unknown>, transformationTarget: StringStateType }>= object({\n  steps: list(stepProps, 2),\n  firstExplanation: child({ plugin: 'text', config: { registry: [] } }),\n  transformationTarget: string('equation'),\n})\n\nexport type EquationsPluginState = typeof equationsState\n/** @public */\nexport type EquationsProps = EditorPluginProps<\n  EquationsPluginState,\n  EquationsConfig\n>\n\n/**\n * @param config - {@link EquationsConfig | Plugin configuration}\n * @public\n */\nexport function createEquationsPlugin(\n  config: EquationsConfig\n): EditorPlugin<EquationsPluginState, EquationsConfig> {\n  return {\n    Component: EquationsEditor,\n    config: config,\n    state: equationsState,\n  }\n}\n\n/** @public */\nexport interface EquationsConfig {\n  i18n: {\n    leftHandSide: string\n    transformation: string\n    mode: string\n    transformationExample: string\n    transformationOfEquations: string\n    transformationOfTerms: string\n    addNewRow: string\n    explanation: string\n    term: string\n    rightHandSide: string\n    combineLikeTerms: string\n    setEqual: string\n    firstExplanation: string\n    addNew: string\n  }\n}"],"names":["Sign","renderSignToString","sign","AlmostEqualTo","Equals","Estimates","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","NotEqualTo","TransformationTarget","StepSegment","TableWrapper","styled","div","padding","Table","table","whiteSpace","MathTd","td","verticalAlign","LeftTd","textAlign","SignTd","TransformTd","paddingLeft","ExplanationTr","tr","margin","FirstExplanationTr","EquationsRenderer","_ref","state","store","useScopedStore","transformationTarget","toTransformationTarget","value","tdPadding","React","isEmpty","firstExplanation","id","getState","colSpan","className","render","style","height","renderDownArrow","renderFirstExplanation","steps","map","step","row","Fragment","key","left","MathRenderer","inline","Term","right","transform","explanation","downArrowBase64","Buffer","from","toString","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","text","Object","values","includes","isTransformationTarget","Equation","setDefaultPreference","RemoveButton","button","outline","width","border","background","DragButton","span","cursor","paddingRight","EquationsEditor","props","focused","config","focusedElement","useScopedSelector","getFocused","nestedFocus","gridFocus","rows","columns","focusNext","focusPrevious","onFocusChanged","_useState","useState","focus","setFocusState","setFocus","isFocused","column","moveRight","lastColumn","Right","Explanation","firstColumn","Left","moveLeft","useGridFocus","length","dispatch","useEffect","HotKeys","allowChanges","keyMap","FOCUS_NEXT_OR_INSERT","FOCUS_PREVIOUS","INSERT","handlers","e","handleKeyDown","index","insertNewEquationAt","insertNewEquationWithFocus","renderIntoSettings","htmlFor","i18n","mode","onChange","set","target","transformationOfEquations","transformationOfTerms","DragDropContext","onDragEnd","result","destination","move","source","Droppable","droppableId","provided","ref","innerRef","droppableProps","onFocus","placeholder","_config$i18n","Draggable","draggableId","draggableProps","dragHandleProps","tabIndex","EdtrIcon","icon","edtrDragHandle","StepEditor","onClick","remove","Icon","faXmark","combineLikeTerms","AddButton","addNew","renderAddButton","next","preventDefault","insert","plugin","DropDown","select","marginLeft","marginRight","backgroundColor","borderRadius","InlineMath","leftHandSide","src","onFocusNext","onFocusPrevious","term","rightHandSide","Transform","transformationExample","transformation","_props$prefix","prefix","_props$suffix","suffix","preferences","useContext","PreferenceContext","MathEditor","readOnly","disableBlock","visual","getKey","onEditorChange","setKey","onInlineChange","onMoveOutRight","onMoveOutLeft","stepProps","object","string","child","registry","equationsState","list","Component"],"mappings":"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"}